<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://morgenm.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://morgenm.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-19T13:33:57+00:00</updated><id>https://morgenm.github.io/feed.xml</id><title type="html">Morgen’s Blog</title><subtitle>Morgen&apos;s blog covering malware analysis and reverse engineering.</subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://morgenm.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://morgenm.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://morgenm.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Using basicgopot with Hybrid-Analysis</title><link href="https://morgenm.github.io/blog/2023/basicgopot-hybrid-analysis/" rel="alternate" type="text/html" title="Using basicgopot with Hybrid-Analysis"/><published>2023-06-20T12:00:00+00:00</published><updated>2023-06-20T12:00:00+00:00</updated><id>https://morgenm.github.io/blog/2023/basicgopot-hybrid-analysis</id><content type="html" xml:base="https://morgenm.github.io/blog/2023/basicgopot-hybrid-analysis/"><![CDATA[<h3 id="the-rundown-on-basicgopot">The Rundown on basicgopot</h3> <p>I have been working on a new project for a little over a week now called <a href="https://github.com/morgenm/basicgopot"><strong><em>basicgopot</em></strong></a>. It is an open source honeypot written in Go. It allows us to create a customized HTTP honeypot server by serving the HTML and CSS files we give (or we can use the prebuilt templates). The code will save and log any files that are uploaded to it via POST requests to <code class="language-plaintext highlighter-rouge">/upload</code>. Its functionality is configurable with a JSON config file, using which we can easily make the server send all the uploaded files to VirusTotal for scanning. This tool allows us to set up a honeypot webserver which saves, logs, and scans all file uploads, quickly and with no hassle.</p> <p>More information about this project can be found on my <a href="https://github.com/morgenm/basicgopot">GitHub</a>. What I want to discuss today is how we can utilize a new basicgopot feature I just released yesterday: WebHooks.</p> <h3 id="what-are-webhooks">What are WebHooks</h3> <p>Generally, a webhook is a mechanism that lets an application send another application information in when an event occurs in real-time. This is exactly what WebHooks do in the context of basicgopot. WebHooks are easily configurable and let us send information to an external web app when an event occurs in the honeypot. At the time of writing only POST requests are supported and the only event that WebHooks can be tied to are upload events. This, however, is powerful in its own right. This could allow us to do things like sending a Slack notification whenever a file is uploaded, sending the file data to another server for data storage, or even performing content analysis on uploaded text and code. The possibilities are endless. One such possibility is what this post will cover: sending files to another malware analysis engine.</p> <p>Basicgopot already has the capability of sending files to VirusTotal for analysis baked into it. However, some organizations and researchers use other tools which can provide more or different data about scanned files. And perhaps some even spin up their own sandboxes for malware analysis and file scanning. In any case, I want to demonstrate how we can utilize WebHooks to extend basicgopot’s capabilities. The specific tool I will be using to illustrate this is <a href="https://www.hybrid-analysis.com">Hybrid-Analysis</a>, since their API is available for free.</p> <h3 id="creating-our-hybrid-analysis-api-key">Creating our Hybrid-Analysis API Key</h3> <p>We need to configure our Hybrid-Analysis API key so basicgopot can use it to upload files for analysis. Documentation on this can be found in their <a href="https://www.hybrid-analysis.com/docs/api/v2">docs</a>. We need to generate the key and save it for adding it to the config file in the next section.</p> <h3 id="installing-and-configuring-basicgopot">Installing and Configuring basicgopot</h3> <p>For the purposes of this post, I downloaded basicgopot v1.1.2 for Linux AMD64 from the releases page on my GitHub. I copied <code class="language-plaintext highlighter-rouge">config/config.json.example</code> to <code class="language-plaintext highlighter-rouge">config/config.json</code>. I modified the config file to look like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"ServerPort"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">8080</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UploadLimitMB"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">512</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UseVirusTotal"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UploadVirusTotal"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
    </span><span class="nl">"VirusTotalApiKey"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"lol"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ScanOutputDir"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"scans/"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UploadsDir"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"uploads/"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UploadLog"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"uploads.json"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"WebHookDir"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"webhooks/"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"UploadWebHooks"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> 
        </span><span class="nl">"Hybrid-Analysis"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"URL"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"https://www.hybrid-analysis.com/api/v2/quick-scan/file"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Method"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Headers"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"api-key"</span><span class="p">:</span><span class="w"> </span><span class="s2">"APIKEY"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"user-agent"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Falcon"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"accept"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*/*"</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"Forms"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"scan_type"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"all"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"file"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"$FILE"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">  
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Where APIKEY is replaced with the API key generated in the previous section. And that’s it. Now we can go and see it in action.</p> <h3 id="deploying">Deploying</h3> <p>To run the honeypot, we just execute this command in the project directory:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./basicgopot
</code></pre></div></div> <p>Now, navigating to <code class="language-plaintext highlighter-rouge">http://localhost:8080</code>, we see:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/basicgopot-hybrid-analysis/index-480.webp 480w,/assets/img/basicgopot-hybrid-analysis/index-800.webp 800w,/assets/img/basicgopot-hybrid-analysis/index-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/basicgopot-hybrid-analysis/index.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>We will select a sample from my computer to the server. Let’s imagine we are a bad actor who has some malware that we want to upload to this vulnerable page:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/basicgopot-hybrid-analysis/upload_zeus-480.webp 480w,/assets/img/basicgopot-hybrid-analysis/upload_zeus-800.webp 800w,/assets/img/basicgopot-hybrid-analysis/upload_zeus-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/basicgopot-hybrid-analysis/upload_zeus.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now we get taken to the upload success page:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/basicgopot-hybrid-analysis/upload_success-480.webp 480w,/assets/img/basicgopot-hybrid-analysis/upload_success-800.webp 800w,/assets/img/basicgopot-hybrid-analysis/upload_success-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/basicgopot-hybrid-analysis/upload_success.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Since the file was uploaded, the WebHook should have triggered as it is tied to upload events. First, we will check the <code class="language-plaintext highlighter-rouge">webhooks</code> directory to see if it triggered. There is a new file there titled <code class="language-plaintext highlighter-rouge">"Hybrid-Analysis DATE"</code> where <code class="language-plaintext highlighter-rouge">DATE</code> is the current date and time. The file looks like this:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"----"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"sha256"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7a981d743a601ca2ae40f78547430bcd404f93520b0ba78e2ca53edf8a0f31f0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"scanners"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CrowdStrike Falcon Static Analysis (ML)"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no-result"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"error_message"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"progress"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
            </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"positives"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"percent"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"anti_virus_results"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Metadefender"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"malicious"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"error_message"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"progress"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
            </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">26</span><span class="p">,</span><span class="w">
            </span><span class="nl">"positives"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
            </span><span class="nl">"percent"</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
            </span><span class="nl">"anti_virus_results"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"VirusTotal"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"malicious"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"error_message"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"progress"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
            </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">75</span><span class="p">,</span><span class="w">
            </span><span class="nl">"positives"</span><span class="p">:</span><span class="w"> </span><span class="mi">12</span><span class="p">,</span><span class="w">
            </span><span class="nl">"percent"</span><span class="p">:</span><span class="w"> </span><span class="mi">16</span><span class="p">,</span><span class="w">
            </span><span class="nl">"anti_virus_results"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"scanners_v2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"crowdstrike_ml"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CrowdStrike Falcon Static Analysis (ML)"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no-result"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"error_message"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"progress"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
            </span><span class="nl">"percent"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"anti_virus_results"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"metadefender"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Metadefender"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"malicious"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"error_message"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"progress"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
            </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">26</span><span class="p">,</span><span class="w">
            </span><span class="nl">"positives"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
            </span><span class="nl">"percent"</span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
            </span><span class="nl">"anti_virus_results"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"virustotal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"VirusTotal"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"malicious"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"error_message"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
            </span><span class="nl">"progress"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w">
            </span><span class="nl">"total"</span><span class="p">:</span><span class="w"> </span><span class="mi">75</span><span class="p">,</span><span class="w">
            </span><span class="nl">"positives"</span><span class="p">:</span><span class="w"> </span><span class="mi">12</span><span class="p">,</span><span class="w">
            </span><span class="nl">"percent"</span><span class="p">:</span><span class="w"> </span><span class="mi">16</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"urlscan_io"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
        </span><span class="nl">"scam_adviser"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
        </span><span class="nl">"clean_dns"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"whitelist"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"internal"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"reports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"----"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"----"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"finished"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Now let’s go check our Hybrid-Analysis account. Navigating to our submissions for our account, we see:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/basicgopot-hybrid-analysis/submission-480.webp 480w,/assets/img/basicgopot-hybrid-analysis/submission-800.webp 800w,/assets/img/basicgopot-hybrid-analysis/submission-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/basicgopot-hybrid-analysis/submission.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Clicking on this gives us some more details. It appears that this sample was indeed malicious:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/basicgopot-hybrid-analysis/submission_details-480.webp 480w,/assets/img/basicgopot-hybrid-analysis/submission_details-800.webp 800w,/assets/img/basicgopot-hybrid-analysis/submission_details-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/basicgopot-hybrid-analysis/submission_details.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>And that about sums it up. Now we have deployed an HTTP honeypot that uploads files to Hybrid-Analysis in only a few minutes! If you are interested in basicgopot, go check it out on my GitHub, linked above. Contributions and feature requests are always welcome!</p>]]></content><author><name></name></author><category term="basicgopot"/><category term="reverse-engineering"/><summary type="html"><![CDATA[How to configure an open source honeypot I wrote to scan uploaded files with Hybrid-Analysis using WebHooks.]]></summary></entry><entry><title type="html">Detecting Phishing Emails with NLP and AI</title><link href="https://morgenm.github.io/blog/2023/phishing-detection-ai/" rel="alternate" type="text/html" title="Detecting Phishing Emails with NLP and AI"/><published>2023-06-08T12:00:00+00:00</published><updated>2023-06-08T12:00:00+00:00</updated><id>https://morgenm.github.io/blog/2023/phishing-detection-ai</id><content type="html" xml:base="https://morgenm.github.io/blog/2023/phishing-detection-ai/"><![CDATA[<p><strong><em>Update: I uploaded the code to GitHub. You can find it <a href="https://github.com/morgenm/nlp-ai-phishing">here</a>.</em></strong></p> <p>For this post, I am discussing a project I undertook to solve a ubiquitous issue in cybersecurity: phishing. Realistically, my efforts can not equal what large corporations have already achieved. I do not have their resources or expertise. Thus, my true aim is to develop a solution using publicly accessible data (in addition to emails from my personal inbox) and code which can run on my laptop.</p> <p>In concrete terms, my aim is binary classification of phishing emails, where the “true” class contains phishing emails, and the “false” class contains benign, non-phishing emails. The only information considered for classification is the body text of the emails. This makes the project simpler from the outset, since I used multiple datasets which had differing formats. Additionally, it makes the classification models developed more general as they can be applied to any text, whether it be a phishing email, website, or social media post. Applying the models to other mediums is outside of the scope of this post; however, I may write about this topic in the future.</p> <p>The project I am describing in this post is by no means rigorous research. I am not an expert in AI or data science; This is merely acting as a hobby project. Considering that, my methods are unscientific and should be regarded as a preliminary exploration into the topic of phishing classification.</p> <h2 id="datasets">Datasets</h2> <p>One problem I identified in previous research is a shortage of data. Many papers used a singular, small dataset which I believe may have led to overfitting. If one, for example, only used a dataset of emails sent and received within a single institution, say a company, there would be a high concentration of text referencing the company. Emails from another company would be unlikely to contain the same topics, which may cause classification to be more inaccurate. To reconcile this, I used as many phishing email datasets that I could find publicly. The datasets are <a href="https://monkey.org/~jose/phishing/">Nazario phishing corpus</a>, <a href="https://www.kaggle.com/datasets/rtatman/fraudulent-email-corpus">Clair fraudulent email corpus</a>, and the <a href="https://www.kaggle.com/datasets/beatoa/spamassassin-public-corpus">Spamassassin corpus</a>. For benign (non-phishing) emails, I used a combination of three large datasets: the same Spamassassin corpus (easy and hard ham), the <a href="https://www.cs.cmu.edu/~enron/">Enron email dataset</a>, and finally a portion of my personal inbox. 4821 of the total emails were phishing and 5303 were benign. The emails were split using <a href="https://scikit-learn.org/">sklearn</a>’s train_test_split with test size of 0.2, resulting in 8099 training emails and 2025 test emails.</p> <h2 id="preprocessing">Preprocessing</h2> <p>After writing code to read all the email body messages, (nltk)[https://www.nltk.org/] and (gensim)[https://radimrehurek.com/gensim/models/ldamodel.html] were used to preprocess the emails. After working with the data for a while, I generated a WordCloud image to easily display common words in the dataset. I then used this to extend nltk’s built-in English stopword list to include common words that were impertinent. A selection of the extended stopwords list is shown below:</p> <p><code class="language-plaintext highlighter-rouge">stopWords.extend(["nbsp", "font", "sans", "serif", "bold", "arial", "verdana", "helvetica", "http", "https", "www", "html", "enron", ... "margin", "spamassassin"])</code></p> <p>I used gensim to strip tags, punctuation, multiple whitespaces, and digits. Furthermore, words shorter than 3 characters were stripped, and the words were stemmed.</p> <h2 id="features">Features</h2> <p>I proceeded by training an LDA (Latent Dirichlet Allocation) model on the total corpus using gensim. This was used to retrieve the top topics for each email. I also used gensim to train a Doc2Vec model on the texts in order to vectorize the body text of each email. Then, sklearn was used to create a TF-IDF vectorizer on the text, and the features were acquired for each email. The sentiment intensity analyzer that is built-in within nltk, VADER, was used to quantify the negativity and positivity of each email. VADER only scores negativity, neutrality, positivity, and “compound,” so future work could be focused on implementing a more complete sentiment analyzer into the codebase. Finally, I created a list of phishing and spam keywords, which I retrieved, funnily enough, from blogs which teach the reader how to avoid being caught by spam filters. This was used to count how many blacklisted words appeared in each email.</p> <p>A few other features were fetched from the email bodies: whether the email contains HTML, whether any hyperlinks are included, how many words are in all caps in the email, how many exclamation marks appear, the total length in characters of the email, and finally the word length. In summary, the features used for the AI models are:</p> <ul> <li>The top topics from the LDA model</li> <li>Doc2Vec vector</li> <li>TF-IDF vector</li> <li>VADER Sentiment Intensity Analyzer scores</li> <li>Number of blacklisted words</li> <li>Whether it contains HTML (true/false)</li> <li>How many links are included</li> <li>How many words are in all caps</li> <li>How many exclamation marks</li> <li>Total length in characters</li> <li>Total word length As one can imagine, this resulted in a large amount of features for each email.</li> </ul> <h2 id="models">Models</h2> <p>Now, turning toward the models themselves and the training process, I used sklearn to implement an RFC (Random Forest Classifier) and an SVC (Support Vector Machine Classifier); however, after seeing some of the results of the SVC, I decided to drop the SVC out of consideration entirely.</p> <p>Importantly, I used <a href="https://www.tensorflow.org/">tensorflow</a> to create a CNN (convolutional neural network). The CNN used either two or three (this value is one variable tested, see results) 1-dimensional convolution layers (named Conv1D in tensorflow). When testing with two convolutional layers, a dropout rate of 0.5 was used for the first of these layers. When testing with three, the dropout applied to the first two layers. Additionally, a dense layer with “ReLU” activation with a dropout of 0.5 was placed between the last convolutional layer and the output layer. Finally, the model was compiled with the “Adam” optimizer.</p> <p>As I mentioned above, the number of convolutional layers acted as a variable during testing. The number of filters of output space for each convolutional layer were identical to each other; however, that number, consistent among each of the layers, was varied during testing. This, as well as the other variables tested are discussed in the next session.</p> <h2 id="results">Results</h2> <p>The variables tested for this project were:</p> <ul> <li>The number of topics for the LDA model</li> <li>The number of maximum features for the TF-IDF Vectorizer</li> <li>The number of filters of output space (output dimensionality) for the convolutional layers in the CNN</li> <li>The total number of convolutional layers in the CNN</li> </ul> <p>The first two variables apply to both the RFC and the CNN, while the latter two only affected the CNN. There were, in actuality, two sets of testing data. The first is the testing data mentioned above, which was derived from the test-train split. The second data set was the remainder of my personal inbox which I did not include in the training and testing data. I did this to see if the models could be reasonably applied to an inbox of “real” emails, not just those relegated to public datasets. I also did it simply out of curiosity, but I thought I would share the results anyways. I did not include my full inbox in the original training set to begin with because that would have made the benign emails greatly outnumber the phishing. The resulting accuracy for the first dataset is labeled “Validation Accuracy.” Accuracy for my personal inbox is labeled “Personal Validation Accuracy.”</p> <h3 id="rfc">RFC</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ai-phishing/rfc_results-480.webp 480w,/assets/img/ai-phishing/rfc_results-800.webp 800w,/assets/img/ai-phishing/rfc_results-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ai-phishing/rfc_results.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As shown in the figure above, the validation accuracy did not change much with the variables. Additionally, the validation accuracy on my personal inbox was considerably lower than on the original test dataset. The best combination of variables for validation accuracy was 1024 LDA topics and 64 TF-IDF features, with an accuracy of 96.69%. For my personal inbox, the combination with the highest validation accuracy was 1024 LDA topics and 12 TF-IDF features, at 91.36%.</p> <h3 id="cnn">CNN</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ai-phishing/cnn_results-480.webp 480w,/assets/img/ai-phishing/cnn_results-800.webp 800w,/assets/img/ai-phishing/cnn_results-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ai-phishing/cnn_results.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The validation accuracy for the CNN ranged from 89% to 98.6%. The highest accuracy was found to be 45 LDA topics, 32 TF-IDF topics, 512 output filters, and 3 layers. The validation accuracy for my personal inbox was again much lower than the other testing dataset. The highest accuracy for my inbox resulted from 1024 LDA topics, 6 TF-IDF features, 512 output filters, and 3 layers for the model. This accuracy was 91.4%.</p> <h2 id="conclusion-and-future-research">Conclusion and Future Research</h2> <p>Both the RFC model and the CNN achieved impressive accuracy; the scores were 96.69% and 98.6%, respectively. I originally did not intend to use such a large amount of LDA topics. I assumed that a low number of features, anywhere between 2 and 10, would be sufficient. Despite my expectation, after working with the data for a bit, I kept increasing the number and found that the accuracy increased for both models. While more than 1000 topics would certainly provide little benefit to a human in modeling and understanding the corpus of emails, it seemed to provide some value to the models.</p> <p>The TF-IDF feature count that resulted in the best accuracy was 12 for the RFC and 6 for the CNN. These numbers numbers are quite close to each other and are low compared to the number of topics. Perhaps this indicates there are only a few key terms that are important to phishing classification, however I am doubtful of this conclusion due to the large number of topics.</p> <p>The combination of 512 output filters and 3 layers resulting in the highest accuracy for the CNN indicates to me that larger models may be better able to classify phishing emails. This conclusion is consistent with the sheer quantity of features being considered for classification.</p> <p>Unfortunately, it appears that I have concluded this project without solving the issue I introduced at the beginning of the blog post: lack of data. I believe the discrepancy between the validation accuracy for the original test dataset and my personal inbox indicates that the public datasets I used were insufficient. While the validation accuracies for the original test dataset are, I think, quite remarkable for a simple project such as this, the much lower accuracies for my personal inbox are unacceptable. Assuming a 91% accuracy, roughly 1 out of 10 true positives would be missed by the classifier (yes, this is a gross simplification, I am just illustrating my point), which could be disastrous in a real-world, enterprise context if these models were being solely relied on. My guess is that these public datasets don’t represent the large majority of modern phishing (and benign) emails, and that not enough data points were present during training for the model to perform well in the real-world.</p> <p>All this being said, I believe future work could focus on working with better, larger datasets. This would only be possible for the average Joe like me if large organizations release new datasets for researchers. While this is a complex issue due to possible re-identification (anonymizing email text would be quite difficult), public data would help propel research into this topic. In regards to the models, it appears that CNNs are particularly adept at classifying phishing emails and that the NLP methods used in this blog provide sufficient features to tackle this task. Incorporating the machine learning phishing URL classification methods already present in the literature with body-text analysis of emails would likely be fruitful for future research. Other methods which could be incorporated are the real-time classification of the actual sites that are linked in emails, and the a priori knowledge of the site’s trustworthiness from sources such as VirusTotal. This is already being done by email security products, but public research into this would be valuable.</p>]]></content><author><name></name></author><category term="phishing"/><category term="nlp"/><category term="ai"/><summary type="html"><![CDATA[Describing my attempt to detecting phishing emails using Natural Language Processing (NLP) and AI.]]></summary></entry><entry><title type="html">Malwarebytes 2017 CrackMe Stage 2</title><link href="https://morgenm.github.io/blog/2023/malwarebytes-2017-crackme-stage-2/" rel="alternate" type="text/html" title="Malwarebytes 2017 CrackMe Stage 2"/><published>2023-02-08T12:00:00+00:00</published><updated>2023-02-08T12:00:00+00:00</updated><id>https://morgenm.github.io/blog/2023/malwarebytes-2017-crackme-stage-2</id><content type="html" xml:base="https://morgenm.github.io/blog/2023/malwarebytes-2017-crackme-stage-2/"><![CDATA[<p>I left my last post off by mentioning that stage 1 of the Malwarebytes 2017 CrackMe performs process replacement/hollowing in order to execute stage 2. In this post I will finish discussing the CrackMe by investigating stage 2, and ultimately discovering the flag. If you have not already read my previous post, you can find it <a href="/blog/2023/malwarebytes-2017-crackme-stage-1/">here</a>.</p> <p>I began by opening the stage 2 executable, which was dumped and decoded in the last post, in Ghidra. Perusing through the decompiled code, a call to ExpandEnvironmentStringsA with the same parameters as the code in stage 1 can be seen. Furthermore, there is a call to GetModuleFileNameA as well as code which performs xor operations on an input string. Some basic sleuthing reveals that the xor_leet function shown below will calculate a single value based on input data. This seems to me to be some sort of checksum function. With that in mind, it becomes clear that the code is comparing the process’s path to its expected value, which, based on how stage 1 loads stage 2, should include rundll32.exe.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1-stage2/environment_strings-480.webp 480w,/assets/img/malwarebytes-crackme-1-stage2/environment_strings-800.webp 800w,/assets/img/malwarebytes-crackme-1-stage2/environment_strings-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1-stage2/environment_strings.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Next, I loaded the program in x32dbg on my Windows VM while also reversing it in Ghidra. To get around the environment strings comparison mentioned above, I simply patched the file in the debugger, just as I did in stage 1 time and time again.</p> <p>I continued examining the listing in Ghidra. After the first comparison successfully executes, the program calls EnumWindows. Upon consulting Windows documentation for this API call, I learned that it is enumerating all open windows on the screen and passing the window handles to a callback function. This callback function is defined by the “malware” author, and compares the checksum of each window name with that of a hardcoded checksum value. It is looking for a specific process, but I do not know which one. In the end, it doesn’t matter what process it is looking for, which will become evident later.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1-stage2/callback-480.webp 480w,/assets/img/malwarebytes-crackme-1-stage2/callback-800.webp 800w,/assets/img/malwarebytes-crackme-1-stage2/callback-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1-stage2/callback.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Deeper within the main function, there is a call to CreateRemoteThread, as well as RtlCreateUserThread and a function call which in turn calls ZwCreateThreadEx. As a fun little aside, global function pointers are setup in stage 2 to point to RtlCreateUserThread and ZwCreateThreadEx, as well as a few other Windows API calls, to hide what the imports are. Anyways, those function calls indicate that there may be some more process injection occurring. The code decides which of those three API calls to perform, based on some tick count.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1-stage2/global_fps-480.webp 480w,/assets/img/malwarebytes-crackme-1-stage2/global_fps-800.webp 800w,/assets/img/malwarebytes-crackme-1-stage2/global_fps-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1-stage2/global_fps.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Regardless of which method is used to create a thread, I need to find out what process is being run. The lpStartAddress which is used when creating the thread is determined by a function which creates and maps a section so it can copy data from the current process to the injected process. Following the trail indicates the data being copied is global data. This data should be the shellcode. But, before I can dump the shellcode in x32dbg, there is one bit of code that needs attention. The CrackMe xors the shellcode before it is injected. The xor key is determined by what value is stored in PEB[2]. Looking at the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb">Windows documentation</a> for the Process Environment Block, PEB[2] would be BeingDebugged. Originally, I thought this was an antidebugging check and that PEB[2] should be zero (which it was while running x32dbg). So, I continued by dumping the shellcode from memory to a file. I dumped 0x177 bytes since memcpy and some other functions took that in as the length of the buffer storing the shellcode.</p> <p>I had to do some research to learn how to debug shellcode. I eventually stumbled upon shellcode2exe. The Python version of the script did not work for me, so I used the portable package found <a href="https://github.com/fr0gger/shellcode2exe_package">here</a>. I used the program to generate an exectuable from the shellcode I dumped to a file. I tried running the program created from the shellcode, but nothing really happened beyond x32dbg freezing. I thought that maybe it was a problem with shellcode2exe, so I resolved to force stage 2 to inject into notepad.exe. I did this by creating a conditional breakpoint within the code which compares the window names, forcing it to break when it finds “Notepad” in the EnumWindows callback. I then forced the program to accept Notepad as the process it was searching for by manipulating EIP to execute the if-statement body. This actually worked, except it didn’t. It injected the code, allowing me to attach to notepad.exe in another debugger instance, but it was again seemingly invalid shellcode which prevented the program from doing anything.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1-stage2/conditional_breakpoint-480.webp 480w,/assets/img/malwarebytes-crackme-1-stage2/conditional_breakpoint-800.webp 800w,/assets/img/malwarebytes-crackme-1-stage2/conditional_breakpoint-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1-stage2/conditional_breakpoint.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1-stage2/notepad_process-480.webp 480w,/assets/img/malwarebytes-crackme-1-stage2/notepad_process-800.webp 800w,/assets/img/malwarebytes-crackme-1-stage2/notepad_process-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1-stage2/notepad_process.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Since my previous attempts failed, I decided to look at the code which xors the shellcode again. On a whim, after PEB[2], or BeingDebugged, is loaded into eax, I changed the value from 0 to 1. There is one part of stage 2 which I have failed to mention until this point. The program performs a checksum on the shellcode and compares it against a hardcoded value. I unwisely ignored this until now. Previously, when PEB[2] was 0, the checksum always failed. But now, when I set it to 1, the checksum passed! I guessed that this meant that the xor was successful, and that I can grab the real shellcode. I dumped it again and passed it through shellcode2exe.</p> <p>I opened the new executable and ran it. It just gave me the flag!</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1-stage2/flag-480.webp 480w,/assets/img/malwarebytes-crackme-1-stage2/flag-800.webp 800w,/assets/img/malwarebytes-crackme-1-stage2/flag-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1-stage2/flag.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Overall this was a pretty fun CrackMe challenge. The challenge used some basic process injection techniques, as well as a couple of antidebugging tricks I was unaware of, so it was a nice chance to learn and practice. I am planning on doing some of the other Malwarebytes CrackMes soon, as well as some other malware analysis and reverse engineering challenges. For now though I am planning on taking a break and diving into something unrelated in my next post.</p>]]></content><author><name></name></author><category term="ctf"/><category term="reverse-engineering"/><category term="malwarebytes-crackme"/><summary type="html"><![CDATA[Writeup for the second half of Malwarebytes's 2017 CrackMe challenge.]]></summary></entry><entry><title type="html">Malwarebytes 2017 CrackMe Stage 1</title><link href="https://morgenm.github.io/blog/2023/malwarebytes-2017-crackme-stage-1/" rel="alternate" type="text/html" title="Malwarebytes 2017 CrackMe Stage 1"/><published>2023-01-29T12:00:00+00:00</published><updated>2023-01-29T12:00:00+00:00</updated><id>https://morgenm.github.io/blog/2023/malwarebytes-2017-crackme-stage-1</id><content type="html" xml:base="https://morgenm.github.io/blog/2023/malwarebytes-2017-crackme-stage-1/"><![CDATA[<p>Hello. This post marks the beginning of my blog where I will be posting writeups for reverse engineering challenges, as well as analyzing malware found in the wild. For this first post, I will be detailing my thought process and discoveries while analyzing the <a href="https://www.malwarebytes.com/blog/news/2017/11/how-to-solve-the-malwarebytes-crackme-a-step-by-step-tutorial">Malwarebytes 2017 CrackMe</a>. Since this is my first blog post, I am not sure how much detail to cover and how exactly to go about it. That being said, this challenge was made for the beginner malware analyst, so I thought it would be a good place to start. I spent my free time the last few days working on this challenge. It has taken me longer than I initially expected, but I have learned a lot in the process.</p> <p>For this challenge, I used a Kali Linux VM for static analysis and a Windows VM for dynamic analysis. The tools I used for static analysis were Ghidra and DIE (Detect It Easy). For dynamic analysis I used x32dbg. Additionally, I wrote some basic Python scripts to aid in the analysis.</p> <p>First, I opened the provided Windows executable in DIE to get a basic overview of the binary. I did not glean very much information from DIE, but I did find some interesting strings: “Nope :(“, “Better luck next time!”, and “HARDWARE\ACPI\DSDT\VBOX__”. The VBOX string is of particular interest, since it looks like it could be referencing a Windows registry key. Furthermore, I investigated some of the imports, which included IsDebuggerPresent and CheckRemoteDebuggerPresent. This indicated that I should expect some antidebugging trickery, as well as anti-VM tricks due to the VBOX registry key string.</p> <p>I went ahead and ran the executable in my Windows sandbox. The program prints out ASCII art of the Malwarebytes logo, as well as some basic information about the CrackMe. According to the output, the flag will be in the format flag{…}.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/execution_stdout-480.webp 480w,/assets/img/malwarebytes-crackme-1/execution_stdout-800.webp 800w,/assets/img/malwarebytes-crackme-1/execution_stdout-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/execution_stdout.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now the fun begins. I opened the PE in Ghidra and let it perform its autoanalysis. Following from the entry point, the main function can be easily found due to the presence of the ASCII art.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/ascii_art-480.webp 480w,/assets/img/malwarebytes-crackme-1/ascii_art-800.webp 800w,/assets/img/malwarebytes-crackme-1/ascii_art-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/ascii_art.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The main function prints out that banner, then calls another function and checks that function’s return value. If the function returns 0, the program outputs “I am so sorry, you failed! :(“ and exits the program. Otherwise, it calls another function. The code for that function looks a bit overwhelming at first glance. It calls a few functions and loads some hardcoded values to the stack. At this moment, I am not too sure what is going on with the code in this function, so I decided to take a slight detour. Remembering the imports I saw in DIE, I searched for “IsDebuggerPresent” in the symbol tree and followed the XREF. This lead me to a function which calls IsDebuggerPresent and CheckRemoteDebuggerPresent. I have seen this before in other reverse engineering CTFs, like the HackTheBox challenges, as a simple antidebugging trick.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/gh_check_debugger-480.webp 480w,/assets/img/malwarebytes-crackme-1/gh_check_debugger-800.webp 800w,/assets/img/malwarebytes-crackme-1/gh_check_debugger-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/gh_check_debugger.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>If there is no debugger present, the function modifies some global data. This pattern, performing some antidebugging checks then modifying global data when the checks are satisfied, occurs again and again in stage 1 of the CrackMe, as will be apparent later.</p> <p>To better understand the program, I began performing dynamic analysis alongside the static analysis I was already undergoing. In order to do this, I loaded the program in x32dbg. I found IsDebuggerPresent in the intermodular calls window in order to navigate to the “CheckTheDebugger” function I inspected in Ghidra. The disassembly shows the calls to the imported functions as well as the if statement.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/dbg_check_debugger-480.webp 480w,/assets/img/malwarebytes-crackme-1/dbg_check_debugger-800.webp 800w,/assets/img/malwarebytes-crackme-1/dbg_check_debugger-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/dbg_check_debugger.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>I placed breakpoints on both of those function calls and executed the program. I stepped over both calls, and when the CheckRemoteDebugger function was called, it returned 1. I modified eax to set it to 0 and continued the program. Despite this, the program still gave me the same failure message.</p> <p>I then moved back to Ghidra to find out what else needed to be done. After calling the debugger check function, the program sleeps for 1 second then calls another interesting function. This function calls RaiseException with an exception code of 0x40010006. Doing some research, I found this throws DBG_PRINT_EXCEPTION_C. This exception will be handled by a debugger, in which case a program can assume there is a debugger present, making this another antidebugging trick (Sources: <a href="https://ntquery.wordpress.com/2015/09/07/windows-10-new-anti-debug-outputdebugstringw/">ntquery blog</a> and <a href="https://github.com/domin568/Anti-Debug-examples-Windows">domin568 on GitHub</a>).</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/gh_print_exception-480.webp 480w,/assets/img/malwarebytes-crackme-1/gh_print_exception-800.webp 800w,/assets/img/malwarebytes-crackme-1/gh_print_exception-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/gh_print_exception.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This function again will modify some global data if the code determines that there is no debugger present. I made a note of this so that I would again force the debugger check to pass, or in other words ensure that the code modifying the global data runs, when running the program in x32dbg. I renamed this function in Ghidra and labeled the function in x32dbg for ease of understanding.</p> <p>The next function calls GetThreadContext to get the context structure in order to perform another antidebugging check. I had not seen this technique either, so I did some research and discovered that the DR0-DR3 debug registers, which can be accessed in the context structure, store linear addresses of breakpoints (<a href="https://www.apriorit.com/dev-blog/367-anti-reverse-engineering-protection-techniques-to-use-before-releasing-software">Source</a>). The code ensures that they are not set to verify that the process is not being debugged. Just as with the previous two functions, the program can easily be coerced using into thinking the checks passed and that the program is not being debugged in x32dbg.</p> <p>I continued analyzing the next few functions in the same fashion, all the while renaming functions in Ghidra and labelling them in x32dbg. The following functions were similar to the previous. They performed antidebugging checks and modified global data when satisfied. The code which succeeds the DR register check function checked the ProcessEnvironmentBlock to see whether the NtGlobalFlag was set. Next, the program queried active devices. The one after checked the presence of the “HARDWARE\ACPI\DSDT\VBOX__” registry key to see if the program is running in a Virtual Box VM. The next function calls CreateToolhelp32Snapshot, Module32First, and then loops while calling Module32Next. I am still not sure what the program is looking for while doing this. My current hypothesis is that it is looking for the presence of some DLL that would indicate it is being run by a debugger, although I have no idea as to which one specifically. The penultimate debugging check function again uses CreateToolhelp32Snapshot, but instead enumerates processes with Process32First and Process32Next. Again, I am not sure which specific process it is looking for. The final function which performs a debugging check compares the time elapsed from near the start of the program with the current time.</p> <p>While looking at all these antidebugging tricks, I wondered what exactly the global data being modified was. What data was the program hiding there? To figure this out, I used Ghidra to understand what the data was being used for. After the program completes all these checks, it loads some data to the stack, then passes that data, as well as pointers to the previously mentioned global data to a function.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/gh_stack-480.webp 480w,/assets/img/malwarebytes-crackme-1/gh_stack-800.webp 800w,/assets/img/malwarebytes-crackme-1/gh_stack-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/gh_stack.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This function, which I named “crypto_stuff,” uses wincrypt functions to decrypt, or encrypt data, depending on the input. This function reveals that one of the two global variables is hashed and then used as the input to derive the key used for encryption and decryption. The algorithm used is AES-128 bit, as indicated by the 0x660e ALG_ID value (<a href="https://learn.microsoft.com/en-us/windows/win32/seccrypto/alg-id">Source</a>).</p> <p>I am not yet certain what is being decrypted, but going back to the main function, if all these checks are passed, a final function will be called (I renamed it “finale”). Looking at finale, some strings are printed such as “I need internet!” and “You are on the right track!” Anyways, I will force the checks to pass in x32dbg by setting the EIP to be inside each of the if-statement bodies which modify the global data. Doing this, a global counter is increased after each successful check, which should total 9 after all the checks (the total number of antidebugging functions). Success! The encrypted data gets decrypted, resulting in a url: <a href="https://pastebin.com/raw/9FugFa91">Pastebin link</a>. Following the URL leads to a Pastebin dump with encoded or encrypted data. Furthermore, a new message is shown in the console:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/on_the_right_track-480.webp 480w,/assets/img/malwarebytes-crackme-1/on_the_right_track-800.webp 800w,/assets/img/malwarebytes-crackme-1/on_the_right_track-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/on_the_right_track.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Before continuing further, I went back and patched the program to always pass the debugging checks, and saved it to a patch file. Continuing the program, it says “You are on the right track” and gives an uncompressed size of some data, as well as opening a window reminding me that I am not done yet.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/dbg_patches-480.webp 480w,/assets/img/malwarebytes-crackme-1/dbg_patches-800.webp 800w,/assets/img/malwarebytes-crackme-1/dbg_patches-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/dbg_patches.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Going back to Ghidra, the purpose of this Pastebin can be better understood. Firstly, the program verifies it can reach the Internet, using InternetGetConnectedState. It proceedes to download the file, again using WinINet functions. Interestingly, it sets the user-agent to “Mal-zilla.” After it downloads the file, it decompresses it. This is accomplished by using another interesting anti-reversing technique which I have not seen before: GetProcAddress. The “malware” hides the import of the RtlDecompressBuffer function by getting a handle to ntdll and then getting the address (function pointer) to the procedure and calling it. I haven’t seen this before, and so I thought this was pretty cool.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/rtldecompressbuffer-480.webp 480w,/assets/img/malwarebytes-crackme-1/rtldecompressbuffer-800.webp 800w,/assets/img/malwarebytes-crackme-1/rtldecompressbuffer-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/rtldecompressbuffer.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This uses the LZNT1 compression algorithm. I tried to write a Python script for decompressing the data, but was unsuccessful. So, I resolved to dump the data from x32dbg after it is decompressed. I saved the dump to a file. Returning to Ghidra, the program can be seen checking that the first two bytes of the data equal “MZ.” So it has to be an executable or a DLL! Looking further, the code expands an environment string “…\rundll.exe secret.dll,#1.” But, looking at the data, it certainly doesn’t look like an executable. The first two bytes are 0x20 0x3b, not MZ! After some more investigation, there is a function which xors the file after it is decompressed. The catch is, the key is grabbed from the keyboard by another function which calls GetClipboardData. This means that the key has to be guessed or uncovered in some other fashion.</p> <p>I spent a significant amount of time stuck here. I tried various ways of trying to crack the key. I knew the first two bytes were MZ, so I already had the first two values. Additionally, I began researching the PE file format more to discover what the most likely values would be for the first few bytes. I found some <a href="https://opensource.apple.com/source/cctools/cctools-836/include/coff/ms_dos_stub.h.auto.html">Apple documentation</a> on the format and tried getting the key by xoring the expected values with the dumped data. None of this worked. After writing several different scripts to try and solve this, I admittedly gave up and looked at the official writeup. This is the only time I consulted any writeup, but the solution to my problem was much easier than I expected.</p> <p>Firstly, I accidently dumped the wrong data. I dumped the compressed data because I chose to dump the wrong variable when viewing the stack right after the call to RtlDecompressBuffer. Secondly, a quick glance at the actual decompressed data shows a repeating phrase: “malwarebytes.” Well, 0 is the identity for xor, so 0 xor key = key. In this way, the key can be easily ascertained to be malwarebytes.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/xor_malwarebytes_key-480.webp 480w,/assets/img/malwarebytes-crackme-1/xor_malwarebytes_key-800.webp 800w,/assets/img/malwarebytes-crackme-1/xor_malwarebytes_key-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/xor_malwarebytes_key.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Even though I was disappointed that I did not figure this part out, and disappointed that I cheated, I returned to cracking the challenge with renewed vigor. I wrote a simple Python script to xor the dump with the key to get the executable.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/unxor_script-480.webp 480w,/assets/img/malwarebytes-crackme-1/unxor_script-800.webp 800w,/assets/img/malwarebytes-crackme-1/unxor_script-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/unxor_script.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Checking back at Ghidra, after the code is successfully decrypted a new rundll.exe process is created, with its state being set to suspended. Then it copies the xored data (the executable payload) into the process’s memory using WriteProcessMemory, then runs the program by calling ResumeThread. This is the classic RunPE process hollowing technique. Now, a new message box is shown on the screen.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/stage2_process-480.webp 480w,/assets/img/malwarebytes-crackme-1/stage2_process-800.webp 800w,/assets/img/malwarebytes-crackme-1/stage2_process-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/stage2_process.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/malwarebytes-crackme-1/stage2_greeting-480.webp 480w,/assets/img/malwarebytes-crackme-1/stage2_greeting-800.webp 800w,/assets/img/malwarebytes-crackme-1/stage2_greeting-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/malwarebytes-crackme-1/stage2_greeting.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Well, now that the payload has been loaded, this is the end of stage 1. Stage 1 used some basic antidebugging techniques, some of which I learned about for the first time. Additionally, it downloaded a payload from Pastebin and xored it with a key that it retrieved from the clipboard. Finally, it used a process hollowing technique to execute the stage 2 payload. I will end my blog post off here, and in the next one I will continue by looking into the stage 2 executable.</p>]]></content><author><name></name></author><category term="ctf"/><category term="reverse-engineering"/><category term="malwarebytes-crackme"/><summary type="html"><![CDATA[Writeup for Malwarebytes's 2017 CrackMe challenge.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://morgenm.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://morgenm.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://morgenm.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>